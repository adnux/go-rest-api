// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const cancelRegistration = `-- name: CancelRegistration :one
;

UPDATE registrations
SET active = false
WHERE event_id = ? AND user_id = ? AND active = true
RETURNING id, event_id, user_id, active
`

type CancelRegistrationParams struct {
	EventID int64 `json:"event_id"`
	UserID  int64 `json:"user_id"`
}

func (q *Queries) CancelRegistration(ctx context.Context, arg CancelRegistrationParams) (Registration, error) {
	row := q.db.QueryRowContext(ctx, cancelRegistration, arg.EventID, arg.UserID)
	var i Registration
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.UserID,
		&i.Active,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
;

DELETE FROM events
WHERE id = ?
`

func (q *Queries) DeleteEvent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
;

DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getEvent = `-- name: GetEvent :one
;

SELECT id, name, description, location, date_time, user_id
FROM events
WHERE id = ?
`

func (q *Queries) GetEvent(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Location,
		&i.DateTime,
		&i.UserID,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many
;

SELECT id, name, description, location, date_time, user_id
FROM events
`

func (q *Queries) GetEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Location,
			&i.DateTime,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRegistrations = `-- name: GetRegistrations :many
;

SELECT reg.id, reg.event_id, reg.user_id, reg.active, ev.id, ev.name, ev.description, ev.location, ev.date_time, ev.user_id, u.id, u.email, u.first_name, u.last_name
	FROM registrations reg
	LEFT JOIN users u
		ON u.id = reg.user_id
	LEFT JOIN events ev
		ON reg.event_id = ev.id
	WHERE event_id = ?
		AND ev.user_id = ?
`

type GetRegistrationsParams struct {
	EventID int64 `json:"event_id"`
	UserID  int64 `json:"user_id"`
}

type GetRegistrationsRow struct {
	Registration Registration `json:"registration"`
	Event        Event        `json:"event"`
	ID           *int64       `json:"id"`
	Email        *string      `json:"email"`
	FirstName    *string      `json:"first_name"`
	LastName     *string      `json:"last_name"`
}

func (q *Queries) GetRegistrations(ctx context.Context, arg GetRegistrationsParams) ([]GetRegistrationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRegistrations, arg.EventID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRegistrationsRow
	for rows.Next() {
		var i GetRegistrationsRow
		if err := rows.Scan(
			&i.Registration.ID,
			&i.Registration.EventID,
			&i.Registration.UserID,
			&i.Registration.Active,
			&i.Event.ID,
			&i.Event.Name,
			&i.Event.Description,
			&i.Event.Location,
			&i.Event.DateTime,
			&i.Event.UserID,
			&i.ID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, password
FROM users
WHERE email = ?
`

type GetUserByEmailRow struct {
	ID       int64  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.Password)
	return i, err
}

const insertEvent = `-- name: InsertEvent :one
;

INSERT INTO events (name, description, date_time, location, user_id)
VALUES (?, ?, ?, ?, ?)
RETURNING id, name, description, location, date_time, user_id
`

type InsertEventParams struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	DateTime    time.Time `json:"date_time"`
	Location    string    `json:"location"`
	UserID      int64     `json:"user_id"`
}

func (q *Queries) InsertEvent(ctx context.Context, arg InsertEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, insertEvent,
		arg.Name,
		arg.Description,
		arg.DateTime,
		arg.Location,
		arg.UserID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Location,
		&i.DateTime,
		&i.UserID,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
;

INSERT INTO users (email, password, first_name, last_name)
VALUES (?, ?, ?, ?)
RETURNING id, email, password, first_name, last_name
`

type InsertUserParams struct {
	Email     string  `json:"email"`
	Password  string  `json:"password"`
	FirstName *string `json:"first_name"`
	LastName  *string `json:"last_name"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
	)
	return i, err
}

const registerUserForEvent = `-- name: RegisterUserForEvent :one
;

INSERT INTO registrations(event_id, user_id)
VALUES (?, ?)
RETURNING id, event_id, user_id, active
`

type RegisterUserForEventParams struct {
	EventID int64 `json:"event_id"`
	UserID  int64 `json:"user_id"`
}

func (q *Queries) RegisterUserForEvent(ctx context.Context, arg RegisterUserForEventParams) (Registration, error) {
	row := q.db.QueryRowContext(ctx, registerUserForEvent, arg.EventID, arg.UserID)
	var i Registration
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.UserID,
		&i.Active,
	)
	return i, err
}

const updateEvent = `-- name: UpdateEvent :exec
;

UPDATE events
SET name = ?, description = ?, location = ?, date_time = ?, user_id = ?
WHERE id = ?
`

type UpdateEventParams struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Location    string    `json:"location"`
	DateTime    time.Time `json:"date_time"`
	UserID      int64     `json:"user_id"`
	ID          int64     `json:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) error {
	_, err := q.db.ExecContext(ctx, updateEvent,
		arg.Name,
		arg.Description,
		arg.Location,
		arg.DateTime,
		arg.UserID,
		arg.ID,
	)
	return err
}
